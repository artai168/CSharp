@using BlazorApp.Entities
@page "/Forms/AddBuilding_OLD"
@inject Data.Services.IAddress_Service<Entities.Building_Address> Building_Address_Service
@inject NavigationManager NavigationManager

<h3>Search and Add Building Address</h3>

<EditForm Model="@address" OnValidSubmit="@AddressInsert">
    <table>
        <tr>
            <td>大廈 :</td>
            <td><input type="text" value="@address.Building_C" @onchange="(ChangeEventArgs _event) =>Bud_C_Changed(_event.Value.ToString())"  required /></td>
        </tr>
        <tr>
            <td>Building :</td>
            <!--<td><input type="text" @bind="address.Building_E" required /></td>-->
            <td><input type="text" value="@address.Building_E" @onchange="(ChangeEventArgs _event) =>Bud_E_Changed(_event.Value.ToString())" required /></td>
        </tr>
        <tr>
            <td>門牌 / Street Number:</td>
            <td><input type="text" @bind="address.Street_Num"  /></td>
        </tr>
        <tr>
            <td>街道 :</td>
            <!--<td><input type="text" @bind="address.Street_C"  /></td>-->
            <td><input type="text" value="@address.Street_C" @onchange="(ChangeEventArgs _event) =>Street_C_Changed(_event.Value.ToString())"/></td>
        </tr>
        <tr>
            <td>Street :</td>
            <!--<td><input type="text" @bind="address.Street_E" /></td>-->
            <td><input type="text" value="@address.Street_E" @onchange="(ChangeEventArgs _event) =>Street_E_Changed(_event.Value.ToString())" /></td>
        </tr>
        <tr>
            <td>分區 :</td>
            <!--<td><input type="text" @bind="address.District_C" required /></td>-->
            <td><input type="text" value="@address.District_C" @onchange="(ChangeEventArgs _event) =>District_C_Changed(_event.Value.ToString())" /></td>
        </tr>
        <tr>
            <td>District :</td>
            <!--<td><input type="text" @bind="address.District_E" required /></td>-->
            <td><input type="text" value="@address.District_E" @onchange="(ChangeEventArgs _event) =>District_E_Changed(_event.Value.ToString())" /></td>
        </tr>
        <tr>
            <td>區 :</td>
            <!--<td><input type="text" @bind="address.Area_C" required /></td>-->
            <td><input type="text" value="@address.Area_C" @onchange="(ChangeEventArgs _event) =>Area_C_Changed(_event.Value.ToString())" /></td>
        </tr>
        <tr>
            <td>Area :</td>
            <!--<td><input type="text" @bind="address.Area_E" required /></td>-->
            <td><input type="text" value="@address.Area_E" @onchange="(ChangeEventArgs _event) =>Area_E_Changed(_event.Value.ToString())" /></td>
        </tr>
        <tr>
            <td colspan="2" style="text-align:center">
                <input type="submit" value="Add" @onclick="@AddressInsert" />
                <input type="button" value="Cancel" @onclick="@Cancel" />               

            </td>
            
        </tr>
    </table>

</EditForm>

<div> @_theValue </div>

@code {
    //Create a new, empty Building_Address object
    Entities.Building_Address address = new Building_Address();
    string _theValue = "";

    //Executes on opage open, set defaults on page
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    protected async Task Bud_C_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address = new Building_Address();
            address.Building_C = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.Building_C, 1);
            if (_address != null)
            {
                address = _address;
            }
            else
            {
                _theValue = $"Error: Can not find the Building: {inStr}!";
            }
        }
    }

    protected async Task Bud_E_Changed(string inStr)
    {
        //bool building_C_has_value = !string.IsNullOrEmpty(address.Building_C);
        //bool street_C_has_value = !string.IsNullOrEmpty(address.Street_C);
        //if ((building_C_has_value) && (street_C_has_value))
        //{
            if (!string.IsNullOrEmpty(inStr))
            {
                Entities.Building_Address _address = new Building_Address();
                address.Building_E = inStr.Trim();
                _address = await Building_Address_Service.Get_Address(address.Building_E, 2);
                if (_address != null)
                {
                    address = _address;
                }
                else
                {
                    _theValue = $"Error: Can not find the Building: {inStr}!";
                }
            }
        //}
    }

    protected async Task Street_C_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.Street_C = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.Street_C, 3);
            if (_address != null)
            {
                address.Street_C = _address.Street_C;
                address.Street_E = _address.Street_E;
                address.District_C = _address.District_C;
                address.District_E = _address.District_E;
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;


            }
            else
            {
                _theValue = $"Error: Can not find the Street: {inStr}!";
            }
        }
    }

    protected async Task Street_E_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.Street_E = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.Street_E, 4);
            if (_address != null)
            {
                address.Street_C = _address.Street_C;
                address.Street_E = _address.Street_E;
                address.District_C = _address.District_C;
                address.District_E = _address.District_E;
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;
            }
            else
            {
                _theValue = $"Error: Can not find the Street: {inStr}!";
            }
        }
    }

    protected async Task District_C_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.District_C = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.District_C, 5);
            if (_address != null)
            {
                address.District_C = _address.District_C;
                address.District_E = _address.District_E;
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;
            }
            else
            {
                _theValue = $"Error: Can not find the District: {inStr}!";
            }
        }
    }

    protected async Task District_E_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.District_E = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.District_E, 6);
            if (_address != null)
            {
                address.District_C = _address.District_C;
                address.District_E = _address.District_E;
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;
            }
            else
            {
                _theValue = $"Error: Can not find the District: {inStr}!";
            }
        }
    }

    protected async Task Area_C_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.Area_C = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.Area_C, 7);
            if (_address != null)
            {
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;
            }
            else
            {
                _theValue = $"Error: Can not find the Area: {inStr}!";
            }
        }
    }

    protected async Task Area_E_Changed(string inStr)
    {
        if (!string.IsNullOrEmpty(inStr))
        {
            Entities.Building_Address _address = new Building_Address();
            address.Area_E = inStr.Trim();
            _address = await Building_Address_Service.Get_Address(address.Area_E, 8);
            if (_address != null)
            {
                address.Area_C = _address.Area_C;
                address.Area_E = _address.Area_E;
            }
            else
            {
                _theValue = $"Error: Can not find the Area: {inStr}!";
            }
        }
    }

    protected async Task AddressInsert()
    {
        if (!string.IsNullOrEmpty(address.Building_C))
        {
            await Building_Address_Service.Insert_Address(address);
            NavigationManager.NavigateTo("/Forms/AddBuilding");
            _theValue = $"Action: Record saved to Database --> {address.Building_C} ";
            address = new Building_Address();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/Forms/AddBuilding");
        address = new Building_Address();
        _theValue = $"Action: Cancel Button just clicked! ";
    }



}
